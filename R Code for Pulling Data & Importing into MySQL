library(nbastatR)
library(RMySQL)
library(tidyverse)


# connect to MySQL Database ----
basketball <- dbConnect(dbDriver('MySQL'), dbname = 'nba2019_20', user = 'root', password = 'password')
today <- Sys.Date()

# Salary Data Only STEP 1 ----
salary <- nba_insider_salaries(assume_player_opt_out = F,
                     assume_team_doesnt_exercise = F, return_wide = F,
                     return_message = T)
for(i in 1:nrow(salary)){
  currentLine <- as.data.frame(salary[i,])
  currentLine <- currentLine %>%
    filter(slugSeason == '2019-20', statusPlayer == 'current roster') %>%
    select(namePlayer, nameTeam, slugSeason, statusPlayer, typeContractDetail, value,
           isFinalSeason, isWaived, isOnRoster, isNonGuaranteed, isTeamOption, isPlayerOption) %>%
    rename(Player = namePlayer, Team = nameTeam) %>%
    mutate(isFinalSeason = isFinalSeason * 1,
           isWaived = isWaived * 1,
           isOnRoster = isOnRoster * 1,
           isNonGuaranteed = isNonGuaranteed * 1,
           isTeamOption = isTeamOption * 1,
           isPlayerOption = isPlayerOption * 1)
  dbWriteTable(con = basketball, value = currentLine, name = paste0("team_salaries"), append = TRUE, overwrite = FALSE)
  message(i)
}

# get gamelogs from the entire season STEP 1----
# we want to exclude "today" because pulling gamelogs from today leads to null values in our dataset
gameLogs <- game_logs(seasons=2020, league="NBA", result_types="player", season_types="Regular Season")
for(i in 1:nrow(gameLogs)){
  if(gameLogs$dateGame[i] != today){
    currentLine <- as.data.frame(gameLogs[i,])
    currentLine <- currentLine %>%
      select(yearSeason, dateGame, idGame, numberGameTeamSeason, slugTeam, isB2B, isB2BFirst, isB2BSecond, locationGame,
             countDaysRestTeam, slugOpponent, outcomeGame, namePlayer, idPlayer, fgm, fga, pctFG, fg3m, fg3a, pctFG3, pctFT,
             fg2m, fg2a, pctFG2, minutes, ftm, fta, oreb, dreb, treb, ast, stl, blk, tov, pf, pts, plusminus) %>%
      rename(Season = yearSeason, Date = dateGame, GameID = idGame, TeamGamesPlayed = numberGameTeamSeason, Team = slugTeam, 
             Location = locationGame, DaysRest = countDaysRestTeam, Opponent = slugOpponent, Outcome = outcomeGame, 
             Player = namePlayer, PlayerID = idPlayer, FGM = fgm, FGA = fga, FGPercent = pctFG, threePFGMade = fg3m, 
             threePAttempted = fg3a, threePointPercent = pctFG3, FTPercent = pctFT, twoPointFGMade = fg2m, 
             twoPointFGAttempted = fg2a, twoPointFGPercent = pctFG2, MP = minutes, FTM = ftm, FTA = fta, OREB = oreb,
             DREB = dreb, TRB = treb, AST = ast, STL = stl, BLK = blk, TOV = tov, PF = pf, PTS = pts, PlusMinus = plusminus) %>%
      mutate(isB2B = isB2B * 1,
             isB2BFirst = isB2BFirst * 1,
             isB2BSecond = isB2BSecond * 1)
    dbWriteTable(con=basketball, value=currentLine, name=paste0("full_season_gamelogs"), append=TRUE, overwrite=FALSE)
    message(i)
  }
}

# YESTERDAYS GAMES ONLY
# get schedule for yesterday's games STEP 1 ----
schedule <- seasons_schedule(seasons=2020, season_type="Regular Season")
sched <- schedule
yesterday <- Sys.Date()-1
for(i in nrow(sched):1){
  dateString <- sched$dateGame[i]
  if(dateString!=yesterday){
    Sched <- sched[-c(i),]
  }
}

# adding yesterday's games into the full season gamelogs table STEP 2----
gameLogs <- game_logs(seasons=2020, league="NBA", result_types="player", season_types="Regular Season")
for(i in 1:nrow(gameLogs)){
  dateString <- gameLogs$dateGame[i]
  if(as.Date(dateString)==yesterday){
    currentLine <- as.data.frame(gameLogs[i,])
    currentLine <- currentLine %>%
      select(yearSeason, dateGame, idGame, numberGameTeamSeason, slugTeam, isB2B, isB2BFirst, isB2BSecond, locationGame,
             countDaysRestTeam, slugOpponent, outcomeGame, namePlayer, idPlayer, fgm, fga, pctFG, fg3m, fg3a, pctFG3, pctFT,
             fg2m, fg2a, pctFG2, minutes, ftm, fta, oreb, dreb, treb, ast, stl, blk, tov, pf, pts, plusminus) %>%
      rename(Season = yearSeason, Date = dateGame, GameID = idGame, TeamGamesPlayed = numberGameTeamSeason, Team = slugTeam, 
             Location = locationGame, DaysRest = countDaysRestTeam, Opponent = slugOpponent, Outcome = outcomeGame, 
             Player = namePlayer, PlayerID = idPlayer, FGM = fgm, FGA = fga, FGPercent = pctFG, threePFGMade = fg3m, 
             threePAttempted = fg3a, threePointPercent = pctFG3, FTPercent = pctFT, twoPointFGMade = fg2m, 
             twoPointFGAttempted = fg2a, twoPointFGPercent = pctFG2, MP = minutes, FTM = ftm, FTA = fta, OREB = oreb,
             DREB = dreb, TRB = treb, AST = ast, STL = stl, BLK = blk, TOV = tov, PF = pf, PTS = pts, PlusMinus = plusminus)
    dbWriteTable(con=basketball, value=currentLine, name=paste0("full_season_gamelogs"), append=TRUE, overwrite=FALSE)
    message(i)
  }
}
